# helper module used by the multi-match-query. It takes a list of fieldnames (or a hash with
# containing the query-time boost factors as values) and returns a function that
# transforms an AST as generated by the query-parser into an Elasticsearch Query.
ConfigNode = require "../config-node"
{isArray} = require "util"

module.exports = class AstTransformer extends ConfigNode

  queryFields: (type)->
    queryFields = {}
    if @_options.fields?
      return @_options.fields

    attrs = type?.attributes ? []
    for attr in attrs when attr.query
      fieldName = if attr.includeSubfields then attr.field+"*" else attr.field
      queryFields[fieldName] = attr.boost ? 1
    queryFields

  transform: (ast, type, query)->
    queryFields = @queryFields type
    fieldBoosts = if isArray(queryFields) then queryFields else ("#{fieldName}^#{boost}" for fieldName, boost of queryFields)
    fieldNames = if isArray(queryFields) then queryFields else Object.keys queryFields

    defaultOperator = query?.qop ? @_options?.defaultOperator ? "and"

    transformers =
      TERMS: (operands)->
        multi_match:
          query: operands.join ' '
          type: 'cross_fields'
          fields: fieldBoosts
          operator: defaultOperator
      OR: (operands) ->
        bool:
          should: operands.map transform
      AND: (operands) ->
        bool:
          must: operands.map transform
      NOT: (operands) ->
        bool:
          must_not: operands.map transform
      SEQ: (operands) ->
        switch defaultOperator?.toLowerCase().trim()
          when 'and'
            bool:
              must: operands.map transform
          else
            bool:
              should: operands.map transform
      NOP: ->
        match_all:{}


    transform = (ast)->
      [operation, operands...] = ast
      transformers[operation] operands


    body = (if ast?.length > 0 then transform(ast) else {})
    @postProcess body, {queryFields,type,fieldNames, fieldBoosts}

  postProcess: (body, options)->
    if @_options?.postProcess?
      @_options.postProcess body, options
    else
      body
